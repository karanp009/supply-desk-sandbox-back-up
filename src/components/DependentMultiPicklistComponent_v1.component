<apex:component >
  <script src="/soap/ajax/15.0/connection.js" type="text/javascript"></script>
        <script src="/soap/ajax/15.0/apex.js" type="text/javascript"></script>
        <script src="../static/102010/js/picklist.js"></script>       
        <script>
       
        //get a session id token to use the js libs
        sforce.connection.sessionId = "{!$Api.Session_ID}";
        
        //describe the object we are dealing with. You'll need to change this to whatever object you are working with. Use the API name of the object.'
        var describeJobResults = sforce.connection.describeSObject('TR1__Job__c'); // the object we want picklists from
        var describeContactResults = sforce.connection.describeSObject('Contact'); // the object we want picklists from 
        
        // function to get the picklist values of a field. Finds all potential options. Simple pass it in a field id. Will return object with data in the values key.
        function getPicklistValues1(field,describeResults) 
        {
            //create return object 
            var returnObj = new returnObject();
            
            try
            {
                var validField = false;
                for(var i = 0; i < describeResults.fields.length; i++) 
                {
                    var fieldList = describeResults.fields[i];
                    var fieldName = fieldList.name;
             
                    if(fieldName.toLowerCase() == field.toLowerCase())
                    {
                        validField = true;
                        for(var j = 0; j < fieldList.picklistValues.length; j++)
                        {
                            
                            var newValue = new Object();
                            newValue.label = fieldList.picklistValues[j].label;
                            newValue.value = fieldList.picklistValues[j].value;
                            newValue.default = fieldList.picklistValues[j].defaultValue;
                            if(fieldList.picklistValues[j].hasOwnProperty('validFor'))
                            {
                                newValue.validFor = fieldList.picklistValues[j].validFor;
                            }
                            returnObj.values.push(newValue);
                        }
                        break;
                    }
                }
                if(!validField)
                {
                    throw 'Invalid field '+field+' specified for object ' + params.object;
                }
            }
            catch(exception)
            {
                returnObj.message = exception;
                returnObj.success = false;
            }        
            
            return returnObj;
        }
        

        function getDependentValues1(field, value, describeResults) 
        {
            var returnObj = new returnObject();
            try
            {     
                var dependencyCode = new Array();          
                var getValues = getPicklistValues1(field, describeResults);        
                if(!getValues.success)
                {
                    throw getValues.message;
                }
                var picklistValues =  getValues.values;
                var getController = getControllerName1(field,describeResults);
                        
                if(!getController.success)
                {
                    throw getController.message;
                }              
                var controller = getController.values;
                    
                // sub function to do the validFor test
                function isDependentValue(index, validFor)
                {
                    var base64 = new sforce.Base64Binary("");
                    var decoded = base64.decode(validFor);
                    var bits = decoded.charCodeAt(index>>3);
                    
                    return ((bits & (0x80 >> (index%8))) != 0);
                }
                var controllerFields =getPicklistValues1(controller, describeResults);
                     
                for(var item = 0; item < controllerFields.values.length; item++)
                {
                    if(controllerFields.values[item].value.toLowerCase() == value.toLowerCase())
                     {
                        for(var i = 0; i < picklistValues.length; i++)
                        {
                            if(isDependentValue(item, picklistValues[i].validFor))
                            {
                                var newValue = new Object();
                                newValue.label = picklistValues[i].label;
                                newValue.value = picklistValues[i].value;
                                newValue.default = picklistValues[i].defaultValue;
                                newValue.validFor = picklistValues[i].validFor;
                                newValue.validForName =controllerFields.values[item].value;
                                returnObj.values.push(newValue);                                                               
                            }
                        }
                    }
                }
            }
        
            catch(exception)
            {
                returnObj.success = false;
                returnObj.message = exception;
            }
            return returnObj;        
        }
                
        
        // get the controller field name
        function getControllerName1(field,describeResults) 
        {
            var returnObj = new returnObject();
            
            try
            {
                var isValid = false;
                
                for(var i = 0; i < describeResults.fields.length; i++)
                {
                    var fieldList = describeResults.fields[i];
                    var fieldName = fieldList.name;
            
                    if(fieldName.toLowerCase() == field.toLowerCase())
                    {
                        if(fieldList.controllerName == undefined)
                        {
                            throw 'Field has no controller';
                        }
                        else
                        {
                            returnObj.values = fieldList.controllerName;
                            isValid = true;
                        }
                        break;
                    }
                }
                
                if(!isValid)
                {
                    throw 'Invalid field '+field+' specified';
                }
            }
            catch(exception)
            {
                returnObj.success = false;
                returnObj.message = exception;
            }
            return  returnObj;
        }
        
        
        function returnObject()
        {
            this.success = true;
            this.message = 'Operation Ran Successfully';
            this.values = new Array();
        }
        
        
        function loadSubSectors(){
            var sector = j$('[id*="sectorSelect"]').val()
            var options = '';
            var ssvalues = getDependentValues1('Sub_Sector__c',sector,describeJobResults).values;
            for(var j = 0; j < ssvalues.length; j++){
                 if(j != 0)
                     options += ',';
                 options += ssvalues[j].value;
            }
            console.log('optons..'+options);
            UpdateDependentSubSectorList(options); 
        }        
        
        function loadJobTitlesAndSpecialisms(){
            var subSectorName = j$('[id*="subSectorSelect"]').val()
            var options1 = '';
            for (var i = 0; i < subSectorName.length; i++) {
                var ssvalues = getDependentValues1('Job_Title__c',subSectorName[i],describeJobResults).values;
                for(var j = 0; j < ssvalues.length; j++){
                     if(options1.length>0)
                         options1 += ',';
                     options1 += ssvalues[j].value;
                }
                console.log('jobtitle optons..'+i+'....'+options1);
            }            
            var options2 = '';
            for(var j =0 ; j < subSectorName.length; j++) {
                var ssvalues = getDependentValues1('Specialism__c',subSectorName[j],describeJobResults).values;
                for(var i = 0; i < ssvalues.length; i++){
                     if(options2.length>0)
                         options2 += ',';
                     options2 += ssvalues[i].value;
                }
                console.log('specialism options..'+j+'...'+options2);
            }
            UpdateDependentList(options1,options2); 
        }
        
        function loopSelected(selObj)
        {
          var selectedArray = new Array();
          var count = 0;
          for (var i=0; i<selObj.options.length; i++) {
            if (selObj.options[i].selected) {
              selectedArray[count] = selObj.options[i].value;
              count++;
            }
          }
          return selectedArray;
        }  
        
        function loadBackgrounds(){
            var functionName = document.getElementById("{!$Component.searchForm.leftColumn.filterSection.fb.function}").value;
            var bgvalues = getDependentValues1('TR1__Primary_Background__c',functionName,describeContactResults).values;
            var options = '';
            for(var i = 0; i < bgvalues.length; i++){
                 if(i != 0)
                     options += ',';
                 options += bgvalues[i].value;
            }
            UpdateDependentBackgroundList(options); 
        }
        
        function loadRegionalAreas(){
            var stateName = document.getElementById("{!$Component.searchForm.leftColumn.locationSection.sr.StateArea}").value;
            var regionValues = getDependentValues1('TR1__Regional_Area__c',stateName,describeContactResults).values;
            var options = '';
            for(var i = 0; i < regionValues.length; i++){
                 if(i != 0)
                     options += ',';
                 options += regionValues[i].value;
            }
            UpdateDependentRegionList(options); 
        }              
       </script>
</apex:component>